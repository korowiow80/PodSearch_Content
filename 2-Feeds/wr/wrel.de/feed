<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
xmlns:rawvoice="http://www.rawvoice.com/rawvoiceRssModule/"
>

<channel>
	<title>wrel.de</title>
	<atom:link href="http://www.wrel.de/feed/" rel="self" type="application/rss+xml" />
	<link>http://www.wrel.de</link>
	<description>Just another TechBlog</description>
	<lastBuildDate>Mon, 04 Jun 2012 18:09:36 +0000</lastBuildDate>
	<language>de-de</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.3.2</generator>
<!-- podcast_generator="Blubrry PowerPress/4.0" -->
	<itunes:summary>Just another TechBlog</itunes:summary>
	<itunes:author>wrel.de</itunes:author>
	<itunes:explicit>no</itunes:explicit>
	<itunes:image href="http://www.wrel.de/wp-content/plugins/powerpress/itunes_default.jpg" />
	<itunes:subtitle>Just another TechBlog</itunes:subtitle>
	<image>
		<title>wrel.de</title>
		<url>http://www.wrel.de/wp-content/plugins/powerpress/rss_default.jpg</url>
		<link>http://www.wrel.de</link>
	</image>
		<item>
		<title>RailsInstaller für Mac OS X</title>
		<link>http://www.wrel.de/railsinstaller-fuer-mac-os-x/</link>
		<comments>http://www.wrel.de/railsinstaller-fuer-mac-os-x/#comments</comments>
		<pubDate>Mon, 04 Jun 2012 18:06:21 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Ruby on Rails]]></category>
		<category><![CDATA[mac os x]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[railsinstaller]]></category>
		<category><![CDATA[setup]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=241</guid>
		<description><![CDATA[Das RailsInstaller Paket erleichtert das Einrichten einer Entwicklungsumgebung für Rails. Wie ihr Rails unter Windows mit dem RailsInstaller installieren könnt, habe ich hier bereits beschrieben. Bisher gab es diesen Installer nur für Windows Systeme und nun wurde dieser in der &#8230; <a href="http://www.wrel.de/railsinstaller-fuer-mac-os-x/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p style="text-align: left;"><img class="aligncenter  wp-image-242" title="railsinstaller-osx" src="http://www.wrel.de/wp-content/uploads/2012/06/railsinstaller-osx.png" alt="" width="661" height="113" />Das RailsInstaller Paket erleichtert das Einrichten einer Entwicklungsumgebung für Rails. Wie ihr Rails unter Windows mit dem RailsInstaller installieren könnt, <a title="Rails 3 Setup unter Windows" href="http://www.wrel.de/rails-3-setup-unter-windows/">habe ich hier bereits beschrieben</a>. Bisher gab es diesen Installer nur für Windows Systeme und nun wurde dieser in der Version 1.0 für Mac OS X Systeme veröffentlicht. Ebenso wie die Windows Version bringt dieses Paket Ruby 1.9.3, Rails 3.2.2, Git sowie Sqlite 3 mit sich.<br />
Zusätzlich kommt noch der Ruby Version Manager <a href="https://rvm.io" target="_blank">rvm</a> mit diesem sich mehrere Ruby Versionen auf dem System installieren lassen. Zur besseren Darstellung von RVM hilft <a href="http://unfiniti.com/software/mac/jewelrybox" target="_blank">JewelryBox</a> mit. Eine grafische Umgebung zur Verwaltung von RVM.</p>
<p>Weitere Infos und den Installer selbst findet ihr auf<a href="http://railsinstaller.org/" target="_blank"> http://railsinstaller.org/</a></p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/railsinstaller-fuer-mac-os-x/" data-text="RailsInstaller für Mac OS X" data-via="mindbreak" data-counturl="http://www.wrel.de/railsinstaller-fuer-mac-os-x/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/railsinstaller-fuer-mac-os-x/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Frailsinstaller-fuer-mac-os-x%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/railsinstaller-fuer-mac-os-x/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>RailsConf 2012 Keynote Videos online</title>
		<link>http://www.wrel.de/railsconf-2012-keynote-videos-online/</link>
		<comments>http://www.wrel.de/railsconf-2012-keynote-videos-online/#comments</comments>
		<pubDate>Sat, 19 May 2012 15:20:19 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Ruby on Rails]]></category>
		<category><![CDATA[railsconf]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=231</guid>
		<description><![CDATA[Die RailsConf ist die größte Versammlung von Ruby on Rails Entwicklern weltweit. Dieses Jahr fand sie in Austin, Texas statt. Die letzten Jahre stellte O&#8217;Reilly immer einen Livestream der Veranstaltung zur Verfügung, für all diejenigen, die sich die 750 Dollar &#8230; <a href="http://www.wrel.de/railsconf-2012-keynote-videos-online/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p><img class="aligncenter size-full wp-image-234" title="railsconf" src="http://www.wrel.de/wp-content/uploads/2012/05/railsconf.png" alt="" width="732" height="179" />Die RailsConf ist die größte Versammlung von Ruby on Rails Entwicklern weltweit. Dieses Jahr fand sie in Austin, Texas statt. Die letzten Jahre stellte O&#8217;Reilly immer einen Livestream der Veranstaltung zur Verfügung, für all diejenigen, die sich die 750 Dollar Eintrittspreis plus einen kurzen Abstecher nach Texas nicht leisten könnten.</p>
<p>Dieses Jahr gab es leider keinen Livestream, aber trotzdem wurden alle Keynotes aufgezeichnet. Und diese sind jetzt von den <a href="http://confreaks.com/" target="_blank">confreaks</a> online gestellt worden. Welche Keynotes auf der RailsConf 2012 gehalten wurden, findet ihr <a href="http://railsconf2012.busyconf.com/schedule" target="_blank">hier</a>.</p>
<p><iframe src="http://www.youtube.com/embed/videoseries?list=PLF16D2F3A8469021E&amp;hl=de_DE" frameborder="0" width="560" height="315"></iframe></p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/railsconf-2012-keynote-videos-online/" data-text="RailsConf 2012 Keynote Videos online" data-via="mindbreak" data-counturl="http://www.wrel.de/railsconf-2012-keynote-videos-online/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/railsconf-2012-keynote-videos-online/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Frailsconf-2012-keynote-videos-online%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/railsconf-2012-keynote-videos-online/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>YARD &#8211; Ruby Code-Dokumentation</title>
		<link>http://www.wrel.de/yard-ruby-dokumentation-generieren/</link>
		<comments>http://www.wrel.de/yard-ruby-dokumentation-generieren/#comments</comments>
		<pubDate>Mon, 07 May 2012 20:23:49 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Allgemein]]></category>
		<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=218</guid>
		<description><![CDATA[Um eine Softwaredokumentation für Ruby bzw. Ruby on Rails Projekte zu erstellen, gibt es viele Wege. Einerseits mittels Rdoc oder auch mit YARD, welches mir erlaubt, Metadaten in meiner Dokumentation zu setzen. Dass die Dokumentation des eigenen Quelltextes wichtig ist, &#8230; <a href="http://www.wrel.de/yard-ruby-dokumentation-generieren/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p style="text-align: left;">Um eine Softwaredokumentation für Ruby bzw. Ruby on Rails Projekte zu erstellen, gibt es viele Wege. Einerseits mittels <a href="http://rdoc.sourceforge.net/" target="_blank">Rdoc</a> oder auch mit <a href="http://yardoc.org/" target="_blank">YARD</a>, welches mir erlaubt, Metadaten in meiner Dokumentation zu setzen.<br />
<img class="aligncenter size-full wp-image-225" title="yard" src="http://www.wrel.de/wp-content/uploads/2012/05/yard.png" alt="" width="461" height="233" /></p>
<p><span id="more-218"></span></p>
<p>Dass die Dokumentation des eigenen Quelltextes wichtig ist, brauche ich hier wahrscheinlich nicht mehr erwähnen. Wozu dient die von mir geschriebene Methode bis hin zu einer Installationsdokumentation für neue Entwickler im Team.<br />
Wenn man das Rails-Gem installiert, wird hier die Rdoc-Doku mitgeliefert. Dies erkennt man bei dem Output von <code>gem install rails</code>:</p>
<pre>Installing RDoc documentation for ...</pre>
<p>Um die Dokumentation offline zu betrachten, müsst ihr hierfür einfach in der Konsole <code>gem server</code> eingeben und es startet ein RDoc Server, welchen ihr über http://localhost:8808/ erreichen könnt. Hier sind alle installieren Gems mit ihrer Doku aufgelistet.</p>
<p>Nun aber zu YARD. YARD ist ein alternatives Ruby Dokumentationstool, unterstützt auch die Dokumentationssyntax von RDoc und bietet noch einige zusätliche Tags. Zuerst installiert ihr euch YARD über RubyGems: <code>gem install yard</code>. Einen Überblick über die YARD-Kommandos erhaltet ihr mit <code>yard --help</code>. Ähnlich wie bei Rdoc könnt ihr mit <code>yard server --reload</code> einen lokalen Dokumentenserver starten. Mit &#8211;reload werden Änderungen in der Code Dokumentation sofort angezeigt, ohne den Server neu starten zu müssen. Positiv finde ich hier die Gestaltung der Dokumentation. Alles ist sehr übersichtlich und die interaktive Suche ermöglicht es, schnell bestimmte Methoden / Klassen zu finden. Alternativ dazu könnt ihr natürlich auch die Doku in HTML-Dateien mit <code>yard doc</code> rausrendern.</p>
<p>So neben dem schönen Design der Doku gibt es natürlich noch mehr was YARD kann. In der Dokumentation lassen sich sogenannte &#8220;tags&#8221; definieren. Diese starten mit einem @ und eine Übersicht über alle YARD-Tags findet ihr <a href="http://rubydoc.info/docs/yard/file/docs/Tags.md" target="_blank">hier</a>. Die wichtigsten hier wären <code>@param</code> und <code>@return</code>.<br />
Mit <code>@param</code> kann dokumentiert werden, welche Parameter meiner Funktion / Methode übergeben werden. In eckigen Klammern steht der Typ und danach kann optional noch eine Beschreibung angegeben werden.</p>
<pre># @param [String] the URL of the page to download</pre>
<p>Weitere Parameter können einfach mit einer weiteren Zeile angeführt werden.<br />
Mit @return wird der Rückgabewert dokumentiert. Ebenso wie bei @param wird hier der Typ und eine optionale Beschreibung angeben.</p>
<p>Die Tagliste und die gute Präsentation der Dokumentation haben mich dazu bewegt, YARD als Dokumentationstool für meine Ruby on Rails Projekte zu verwenden. Verschiedene YARD-Dokumentationen von Gems findet ihr auf http://rubydoc.org/. Hier könnt ihr auch über &#8220;Add project&#8221; eine Dokumentation für euer, auf github gehostetes Projekt, erzeugen.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/yard-ruby-dokumentation-generieren/" data-text="YARD &#8211; Ruby Code-Dokumentation" data-via="mindbreak" data-counturl="http://www.wrel.de/yard-ruby-dokumentation-generieren/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/yard-ruby-dokumentation-generieren/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Fyard-ruby-dokumentation-generieren%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/yard-ruby-dokumentation-generieren/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>WordPress verstecktes Optionsmenü</title>
		<link>http://www.wrel.de/wordpress-verstecktes-optionsmenu/</link>
		<comments>http://www.wrel.de/wordpress-verstecktes-optionsmenu/#comments</comments>
		<pubDate>Sat, 14 Apr 2012 19:27:51 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Wordpress]]></category>
		<category><![CDATA[versteckte option]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=190</guid>
		<description><![CDATA[So heute geht es mal wieder um die Blogging Software WordPress. Im Allgemeinen um eine versteckte Funktion im Admin-Panel um diverse Einstellungen des Blogs zu verwalten und zu ändern. Diese möchte ich euch natürlich nicht vorenthalten. In dieser Optionen Übersicht &#8230; <a href="http://www.wrel.de/wordpress-verstecktes-optionsmenu/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>So heute geht es mal wieder um die Blogging Software WordPress. Im Allgemeinen um eine versteckte Funktion im Admin-Panel um diverse Einstellungen des Blogs zu verwalten und zu ändern. Diese möchte ich euch natürlich nicht vorenthalten.<img class="aligncenter size-full wp-image-161" title="wordpress" src="http://www.wrel.de/wp-content/uploads/2012/03/wordpress.png" alt="" width="500" height="187" /><span id="more-190"></span> In dieser Optionen Übersicht von WordPress werden alle <span><span>Einstellungsmöglichkeiten</span></span> eurer <span><span>WordPress</span></span> Blogging Software angezeigt. Zudem findet ihr hier auch noch Einstellungen von diversen <span><span>Plugins</span></span>, welche ihr in eurem Blog benutzt. Einige dieser Einstellungen könnt ihr auch einfach über das <span><span>Admin</span></span>-<span><span>Panel</span></span> vornehmen oder direkt in den <span><span>Plugin</span></span>-Einstellungen speichern. Doch es gibt eben auch Optionen und Hintergrundinformationen, welche ihr über das normale <span><span>Dashboard</span></span> nicht setzen bzw. ändern könnt. Dafür gibt es diese versteckte <span><span>Optionsübersicht</span></span>. So, aber wie kommt ihr da hin. Hierfür müsst ihr einfach <code>www.eureblogurl.de/wp-admin/options.php</code> in die <span>Adressleiste eures Browsers</span> eingeben.</p>
<p><img class="aligncenter size-full wp-image-192" title="wp-options" src="http://www.wrel.de/wp-content/uploads/2012/04/wp-options.png" alt="" width="823" height="577" /></p>
<p>So nachdem ihr die Seite aufgerufen habt, seht ihr eine Liste an verschiedenen Optionen. Links steht die Bezeichnung des Feldes und rechts der Wert selbst. In der Liste findet ihr jetzt alle möglichen Optionen eures Blogs wie <span><span>z.B.</span></span> die <span><span>&gt;blogdescription</span></span> oder aber auch Einstellungen von diversen <span><span>Plugins</span></span>. Ich selbst habe es für eine Änderung einer Einstellung eines <span><span>Plugins</span></span> benötigt, welche ich nicht über das normale <span><span>Admin</span></span> <span><span>Panel</span></span> ändern konnte.</p>
<p>Hier können nun die Einstellungen vorgenommen werden. <strong>Vorsicht: </strong>Ändert nur die Felder, wo ihr absolut sicher seid, wofür diese Werte stehen. <span>Anschließend</span> müsst ihr ganz nach unten scrollen und mit einem Klick auf &#8220;<code>Änderungen übernehmen</code>&#8220;, die Werte speichern. Manche Felder sind hier grau mit der Aufschrift <code>SERIALIZED DATA</code> hinterlegt und können über das Menü nicht geändert werden. Hierbei handelt es sich um serialisierte PHP Arrays. Um diese zu ändern müsst ihr euch mit einem MySQL Client (bei mir <span><span>phpMyAdmin</span></span>) zu eurer Blog Datenbank verbinden und die Tabelle <code><span><span>wp</span></span>_<span><span>options</span></span></code> auswählen. So und jetzt seht ihr, dass die versteckte <span>Options-Auflistung</span> eine <span>Repräsentation</span> der <code><span><span>wp</span></span>_<span><span>options</span></span></code> Tabelle ist. Über MySQL könnt ihr jetzt auch die serialisierten Werte ändern. Die <span>ausgetrauten</span>, serialisierten Werte in der Auflistung <span>dienen</span> nur zum Schutz.</p>
<p>Eine Sache ist mir beim durchsehen der Liste aufgefallen. Viele <span><span>Plugins</span></span>, die ich einmal im Blog verwendet habe, aber nach einiger Zeit wieder deaktiviert und deinstalliert habe, haben noch immer ihre Werte in der Liste. Kann <span>nützlich</span> sein, wenn ihr euch doch nochmal für das deaktivierte <span><span>Plugin</span></span> entscheidet. Kann aber auch die Datenbank unnötig <span><span>zumüllen</span></span>. Diese versteckte Option gibt es schon länger in <span><span>WordPress</span></span> und ich hoffe ich konnte euch etwas helfen.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/wordpress-verstecktes-optionsmenu/" data-text="WordPress verstecktes Optionsmenü" data-via="mindbreak" data-counturl="http://www.wrel.de/wordpress-verstecktes-optionsmenu/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/wordpress-verstecktes-optionsmenu/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Fwordpress-verstecktes-optionsmenu%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/wordpress-verstecktes-optionsmenu/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Rails 3.2.3 veröffentlicht</title>
		<link>http://www.wrel.de/rails-3-2-3-veroffentlicht/</link>
		<comments>http://www.wrel.de/rails-3-2-3-veroffentlicht/#comments</comments>
		<pubDate>Sat, 07 Apr 2012 16:23:41 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=175</guid>
		<description><![CDATA[Letzte Woche wurde Ruby on Rails in der Version 3.2.3 veröffentlicht. Neben einigen Bugfixes wurde auch einiges an der Sicherheit des Frameworks und dem Schutz vor unerlaubten Parametern bei mass assignment geändert. Beim Erstellen einer neuen Rails 3.2.3 Applikation wird &#8230; <a href="http://www.wrel.de/rails-3-2-3-veroffentlicht/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>Letzte Woche wurde Ruby on Rails in der Version 3.2.3 veröffentlicht. Neben einigen Bugfixes wurde auch einiges an der Sicherheit des Frameworks und dem Schutz vor unerlaubten Parametern bei mass assignment geändert.<img class="aligncenter size-full wp-image-186" title="rails-3" src="http://www.wrel.de/wp-content/uploads/2012/04/rails-3.png" alt="" width="490" height="290" /></p>
<p><span id="more-175"></span></p>
<p>Beim Erstellen einer neuen Rails 3.2.3 Applikation wird jetzt standardmäßig der Wert <code>config.active_record.whitelist_attributes</code> im applications controller auf <code>true</code> gesetzt. Durch diese Option wird eine Whitelist erstellt, die Attribute eines Models im Projekt enthält, welche durch mass assignment gesetzt werden können. Dadurch wird global im Projekt verhindert, dass ungewollt, mittels mass assignment, Attribute gesetzt werden.</p>
<p>Nun mal zu einem Beispiel. Nehmen wir an, wir haben ein User Model mit folgenden Attributen: <code>name, password, is_admin</code>. Das letzte Attribut gibt in unserem Beispiel an, ob der Benutzer ein Administrator unserer Seite ist. Bei unserem Registrierungsformular kann der Benutzer ein Usernamen und ein Passwort definieren. Die create action im User Controller würde folgendermaßen aussehen:</p>

<div class="wp_syntax"><div class="code"><pre class="rails" style="font-family:monospace;"><span style="color:#9966CC; font-weight:bold;">def</span> create
  User.<span style="color:#9900CC;">create</span><span style="color:#006600; font-weight:bold;">&#40;</span>params<span style="color:#006600; font-weight:bold;">&#91;</span><span style="color:#ff3333; font-weight:bold;">:user</span><span style="color:#006600; font-weight:bold;">&#93;</span><span style="color:#006600; font-weight:bold;">&#41;</span>
<span style="color:#9966CC; font-weight:bold;">end</span></pre></div></div>

<p>Hier wird mittels mass assignment ein neuer User erstellt. Alles schön und gut. Nur was ist, wenn der User in den <code>params</code> noch das attribut <code>:is_admin =&gt; true</code> setzt? So könnte sich jeder als Admin registrieren.</p>
<p>Um dies zu vermeiden, gibt es die Option <code>attr_protected</code>, mit welche man gewisse Attribute vom Setzen durch mass assignment ausschliessen kann. Bei <code>attr_protected :is_admin</code> würde beim Setzen des <code>is_admin</code> Attributes dies nicht gespeichert werden. Alternativ können auch mit <code>attr_accessible</code> die Attribute angegeben werden, welche durch mass assignment gesetzt werden dürfen. Mit <code>attr_accessible :username, :password</code> können nur diese Werte mit <code>User.create(params[:user])</code> gesetzt werden. Alle anderen Werte wären nil.</p>
<p>Aber zurück zu <code>config.active_record.whitelist_attributes</code>. Dieser Wert verlangt es in allen Models die Attribute für mass assignment zu bestimmen. Ist in einem Model keins der beiden Methoden (<code>attr_protected</code> / <code>attr_accessible</code>) gesetzt, können keine Attribute mittels mass assignment gestetzt werden. Ich persönlich finde die Option super. So ist der Entwickler vor bösen Überraschungen bewahrt. Aber um die Option zu nutzen müsst ihr jetzt nicht extra auf Rails 3.2.3 upgraden. Ich selbst habe das auch mit einer Rails 3.2. Applikation erfolgreich getestet.</p>
<p>Bei der Generierung und der Verwendung des <code>authenticity_token</code> in remote-forms hat sich ebenfalls etwas geändert. Remote-Forms sind HTML-Formulare, welche mittels XMLHttpRequest oder zu kurz mittels einem AJAX-Call abgesendet werden. Seit Rails 3.2.3 kann die Generierung des <code>authenticity_token</code> bei <code>:remote =&gt; true</code> mittels <code>config.action_view.embed_authenticity_token_in_remote_forms = false</code> abgestellt werden. Es wird für diese Art von Formularen kein hidden-field mit dem Authenticity Token generiert,</p>
<pre>&lt;input name="authenticity_token" type="hidden" value="" /&gt;</pre>
<p>sondern das Token aus dem Meta-Tag genutzt. Aber wichtig hierbei: Das Formular kann bei deaktivierten JavaScript nicht mehr richtig versendet werden. Falls du die Generierung des Tokens standardmäßig deaktiviert hast, kannst du trotzdem mit der Option <code>:authenticity_token =&gt; true</code> ein Token in dem Formular generieren lassen.</p>
<p>Ich finde es sind schon einige interessante Änderungen in dem Update. Natürlich war das noch nicht alles. Was sich sonst noch geändert hat, könnt ihr <a href="http://weblog.rubyonrails.org/2012/3/30/ann-rails-3-2-3-has-been-released/" target="_blank">hier</a> nachlesen.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/rails-3-2-3-veroffentlicht/" data-text="Rails 3.2.3 veröffentlicht" data-via="mindbreak" data-counturl="http://www.wrel.de/rails-3-2-3-veroffentlicht/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/rails-3-2-3-veroffentlicht/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Frails-3-2-3-veroffentlicht%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/rails-3-2-3-veroffentlicht/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
<enclosure url="http://wrel.podspot.de/files/Memo.m4a" length="2875733" type="audio/x-m4a" />
		<itunes:subtitle>Letzte Woche wurde Ruby on Rails in der Version 3.2.3 veröffentlicht. Neben einigen Bugfixes wurde auch einiges an der Sicherheit des Frameworks und dem Schutz vor unerlaubten Parametern bei mass assignment geändert. - </itunes:subtitle>
		<itunes:summary>Letzte Woche wurde Ruby on Rails in der Version 3.2.3 veröffentlicht. Neben einigen Bugfixes wurde auch einiges an der Sicherheit des Frameworks und dem Schutz vor unerlaubten Parametern bei mass assignment geändert.



Beim Erstellen einer neuen Rails 3.2.3 Applikation wird jetzt standardmäßig der Wert config.active_record.whitelist_attributes im applications controller auf true gesetzt. Durch diese Option wird eine Whitelist erstellt, die Attribute eines Models im Projekt enthält, welche durch mass assignment gesetzt werden können. Dadurch wird global im Projekt verhindert, dass ungewollt, mittels mass assignment, Attribute gesetzt werden.

Nun mal zu einem Beispiel. Nehmen wir an, wir haben ein User Model mit folgenden Attributen: name, password, is_admin. Das letzte Attribut gibt in unserem Beispiel an, ob der Benutzer ein Administrator unserer Seite ist. Bei unserem Registrierungsformular kann der Benutzer ein Usernamen und ein Passwort definieren. Die create action im User Controller würde folgendermaßen aussehen:
def create
  User.create(params[:user])
end
Hier wird mittels mass assignment ein neuer User erstellt. Alles schön und gut. Nur was ist, wenn der User in den params noch das attribut :is_admin =&gt; true setzt? So könnte sich jeder als Admin registrieren.

Um dies zu vermeiden, gibt es die Option attr_protected, mit welche man gewisse Attribute vom Setzen durch mass assignment ausschliessen kann. Bei attr_protected :is_admin würde beim Setzen des is_admin Attributes dies nicht gespeichert werden. Alternativ können auch mit attr_accessible die Attribute angegeben werden, welche durch mass assignment gesetzt werden dürfen. Mit attr_accessible :username, :password können nur diese Werte mit User.create(params[:user]) gesetzt werden. Alle anderen Werte wären nil.

Aber zurück zu config.active_record.whitelist_attributes. Dieser Wert verlangt es in allen Models die Attribute für mass assignment zu bestimmen. Ist in einem Model keins der beiden Methoden (attr_protected / attr_accessible) gesetzt, können keine Attribute mittels mass assignment gestetzt werden. Ich persönlich finde die Option super. So ist der Entwickler vor bösen Überraschungen bewahrt. Aber um die Option zu nutzen müsst ihr jetzt nicht extra auf Rails 3.2.3 upgraden. Ich selbst habe das auch mit einer Rails 3.2. Applikation erfolgreich getestet.

Bei der Generierung und der Verwendung des authenticity_token in remote-forms hat sich ebenfalls etwas geändert. Remote-Forms sind HTML-Formulare, welche mittels XMLHttpRequest oder zu kurz mittels einem AJAX-Call abgesendet werden. Seit Rails 3.2.3 kann die Generierung des authenticity_token bei :remote =&gt; true mittels config.action_view.embed_authenticity_token_in_remote_forms = false abgestellt werden. Es wird für diese Art von Formularen kein hidden-field mit dem Authenticity Token generiert,
&lt;input name=&quot;authenticity_token&quot; type=&quot;hidden&quot; value=&quot;&quot; /&gt;
sondern das Token aus dem Meta-Tag genutzt. Aber wichtig hierbei: Das Formular kann bei deaktivierten JavaScript nicht mehr richtig versendet werden. Falls du die Generierung des Tokens standardmäßig deaktiviert hast, kannst du trotzdem mit der Option :authenticity_token =&gt; true ein Token in dem Formular generieren lassen.

Ich finde es sind schon einige interessante Änderungen in dem Update. Natürlich war das noch nicht alles. Was sich sonst noch geändert hat, könnt ihr hier nachlesen.</itunes:summary>
		<itunes:author>wrel.de</itunes:author>
		<itunes:explicit>no</itunes:explicit>
	</item>
		<item>
		<title>WordPress Plugin qTranslate entfernen</title>
		<link>http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/</link>
		<comments>http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/#comments</comments>
		<pubDate>Fri, 30 Mar 2012 18:59:20 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Wordpress]]></category>
		<category><![CDATA[qtranslate]]></category>
		<category><![CDATA[wordrpess]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=153</guid>
		<description><![CDATA[Mit qTranslate könnt ihr euren Blog mit mehrsprachigen Inhalten füllen. Wenn ihr euch doch entscheidet, von einem mehrsprachigen Blog wieder auf eine Sprache zurückzukehren, gibt es einige Schritte zu beachten um qTranslate vollständig zu deaktivieren. Das Plugin selbst bietet einige &#8230; <a href="http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>Mit <a href="http://www.qianqin.de/de/qtranslate/" target="_blank">qTranslate</a> könnt ihr euren Blog mit mehrsprachigen Inhalten füllen. Wenn ihr euch doch entscheidet, von einem mehrsprachigen Blog wieder auf eine Sprache zurückzukehren, gibt es einige Schritte zu beachten um qTranslate vollständig zu deaktivieren.<img class="aligncenter size-full wp-image-161" title="wordpress" src="http://www.wrel.de/wp-content/uploads/2012/03/wordpress.png" alt="" width="500" height="187" /></p>
<p><span id="more-153"></span><br />
Das Plugin selbst bietet einige Einstellungsmöglichkeiten, wie dem Nutzer der mehrsprachige Content präsentiert wird. So kann man dies z.B. über Subdomains (de.wrel.de) oder Prefixe (www.wrel.de/en/ARTIKEL_PERMALINK) in der URL lösen. Was qTranslate selbst im Hintergrund macht ist, dass in dem Artikel / Seite alle aktivierten Sprachen gespeichert werden. Bei einer Impressumsseite, welche auf deutsch und englisch verfügbar ist, würde der Titel der Seite wie folgt im Hintergrund gespeichert werden:</p>
<pre>&lt;!--:en--&gt;Imprint&lt;!--:--&gt;&lt;!--:de--&gt;Impressum&lt;!--:--&gt;</pre>
<p>Hier wird im Titel und im Inhaltsbereich der Seite der mehrsprachige Inhalt mittels den qTranslate Tags getrennt und in der Datenbank abgespeichert.</p>
<p>So was machen wir jetzt, wenn wir qTransalte schon erfolgreich auf unserem Blog eingesetzt haben und kommen darauf, dass der Blog hauptsächlich englische Inhalte hat? Auch die Leser sind meist nur aus englischsprachigen Ländern. Ich möchte den Blog jetzt nurnoch einsprachig halten.</p>
<p>Kann ich jetzt einfach qTranslate als Plugin deaktivieren und das wars? Nein das geht leider nicht so einfach. Wenn ich das Plugin nur deaktiviere und anschließend meinen Blog aufrufe, werden bei mehrsprachigen Seiten / Artikel nun alle Sprachen angezeigt. Bei unserer Impressumseite wäre das dann:</p>
<pre>ImprintImpressum</pre>
<p>Der deutsche und der englische Text erscheinen dann gleichzeitig. Dies kommt daher, weil wir das Plugin deaktiviert haben und der Inhalt / Titel noch immer mehrsprachig mit den Tags in der Datenbank hinterlegt ist. Das wollen wir natürlich nicht. Aber wie bekommen wir das jetzt weg?</p>
<p>Gleich vorab: Der Workaround hier ist nicht ganz ungefährlich. Bitte <strong>sichert euch eure Datenbank vorher</strong>! Durchgeführt selbst habe ich es bei WordPress Version 3.3. Ich musste auch erst suchen, in wie weit qTranslate in einem Blog Spuren hinterlässt. Und da bin ich auf den Post von <a href="http://www.qianqin.de/qtranslate/forum/viewtopic.php?p=6858#p6858" target="_blank">guido</a> gestossen. So müsst ihr einfach diese acht Queries direkt in MySQL ausführen:</p>
<pre>UPDATE wp_posts SET post_content = case when LOCATE('&lt;!--:en--&gt;', post_content) &gt; 0 then SUBSTRING(post_content, LOCATE('&lt;!--:en--&gt;', post_content)+10) else post_content end;
UPDATE wp_posts SET post_content = case when LOCATE('&lt;!--:--&gt;', post_content) &gt; 0 then SUBSTRING(post_content, 1, LOCATE('&lt;!--:--&gt;', post_content)-1) else post_content end;

UPDATE wp_posts SET post_title = case when LOCATE('&lt;!--:en--&gt;', post_title) &gt; 0 then SUBSTRING(post_title, LOCATE('&lt;!--:en--&gt;', post_title)+10) else post_title end;
UPDATE wp_posts SET post_title = case when LOCATE('&lt;!--:--&gt;', post_title) &gt; 0 then SUBSTRING(post_title, 1, LOCATE('&lt;!--:--&gt;', post_title)-1) else post_title end;

UPDATE wp_posts SET post_excerpt = case when LOCATE('&lt;!--:en--&gt;', post_excerpt) &gt; 0 then SUBSTRING(post_excerpt, LOCATE('&lt;!--:en--&gt;', post_excerpt)+10) else post_excerpt end;
UPDATE wp_posts SET post_excerpt = case when LOCATE('&lt;!--:--&gt;', post_excerpt) &gt; 0 then SUBSTRING(post_excerpt, 1, LOCATE('&lt;!--:--&gt;', post_excerpt)-1) else post_excerpt end;

UPDATE wp_terms SET name = case when LOCATE('&lt;!--:en--&gt;', name) &gt; 0 then SUBSTRING(name, LOCATE('&lt;!--:en--&gt;', name)+10) else name end;
UPDATE wp_terms SET name = case when LOCATE('&lt;!--:--&gt;', name) &gt; 0 then SUBSTRING(name, 1, LOCATE('&lt;!--:--&gt;', name)-1) else name end;</pre>
<p>Hier werden aus <code>wp_posts</code> und <code>wp_terms</code> die englischen Artikel behalten und alle anderen gelöscht. Ebenso werden die qTranslate Tags entfernt. Ihr könnt natürlich auch statt en auch de bei den Queries einsetzen, wenn ihr den deutschen Inhalt behalten wollt.</p>
<p>Wenn ihr das ausgeführt habt, könnt ihr das Plugin deaktivieren. Die Permalinks für die Artikel bleiben natürlich erhalten. Eigentlich war&#8217;s das dann schon. Das Problem, welches ich noch hatte, war wenn ich auf die Home Seite meines Blogs gegangen bin, kam statt meiner Startseite irgendein Artikel. Das hat den Grund, dass noch nicht komplett alles von qTranslate entfernt wurde. Im Hauptverzeichnis des Blogs in der <code>.htaccess</code> File waren noch Einträge von qTranslate vorhanden. Diese Einträge sind bei qTranslate für das Routing wie z.B. /de/impressum zuständig. Da aber das Plugin nicht mehr aktiv ist, gibt es diese Struktur auch nicht mehr und WordPress findet unter der Resource nichts mehr. Hier wird versucht einen Artikel zu finden, der mit de beginnt und auf diesen umgeleitet.</p>
<p>Um das zu vermeiden, müsst ihr in der <code>.htaccess</code> noch den qTranslate Code entfernen. Bei mir waren es folgende Zeilen:</p>
<pre># qtranslate fix
RewriteBase /
RewriteCond %{QUERY_STRING} ^$
#RewriteCond %{HTTP:Accept-Language} de [NC]
#RewriteRule ^$ http://www.YOURDOMAIN.com/de/ [R,L]

RewriteCond %{QUERY_STRING} ^$
RewriteCond %{HTTP:Accept-Language} en
RewriteRule ^$ http://www.YOURDOMAIN.com/en/ [R,L]</pre>
<p>So nun ist qTranslate vollständig aus eurem Blog entfernt. Und alles sollte wieder gehen. Wenn nicht, dann habt ihr immer noch euer Backup. Ich hoffe, ich konnte euch etwas helfen.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/" data-text="WordPress Plugin qTranslate entfernen" data-via="mindbreak" data-counturl="http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Fwordpress-plugin-qtranslate-entfernen%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/wordpress-plugin-qtranslate-entfernen/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Rails Asset Pipeline</title>
		<link>http://www.wrel.de/rails-asset-pipeline/</link>
		<comments>http://www.wrel.de/rails-asset-pipeline/#comments</comments>
		<pubDate>Tue, 27 Mar 2012 15:19:58 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Ruby on Rails]]></category>
		<category><![CDATA[asset pipeline]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=130</guid>
		<description><![CDATA[&#160; Eines der großen neuen Features in Rails 3.1 ist die so genannte Asset Pipeline. Hiermit ist es möglich, die JavaScript und CSS Assets des Projektes zu komprimieren und zu minimieren. Des weiteren lassen sich mehrere Assets zu einer Datei &#8230; <a href="http://www.wrel.de/rails-asset-pipeline/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>&nbsp;</p>
<p>Eines der großen neuen Features in Rails 3.1 ist die so genannte Asset Pipeline. Hiermit ist es möglich, die JavaScript und CSS Assets des Projektes zu komprimieren und zu minimieren. Des weiteren lassen sich mehrere Assets zu einer Datei zusammenführen. Ich möchte euch hier die Features der Asset Pipeline und diesbezüglich die Neuerungen in Rails 3.1 erläutern.<img class="aligncenter size-full wp-image-148" title="asset-pipeline" src="http://www.wrel.de/wp-content/uploads/2012/03/asset-pipeline.png" alt="" width="432" height="186" /></p>
<p><span id="more-130"></span></p>
<p>Die Asset Pipline ist eines der großen, neuen Hauptfeatures in Rails 3.1, welche aber auch einiges an Verwirrung stiften kann. Wenn du mit der Asset Pipeline noch komplett unvertraut bist, lies vorher den <a href="http://ryanbigg.com/guides/asset_pipeline.html" target="_blank">Rails Guide zur Asset Pipeline</a>. Dieser deckt einen großen Teil der Features ab.</p>
<p>Solltest du bereits eine Rails 3.1 Applikation erstellt haben, findest du unter <code>/assets/application.js</code> JavaScript Code für deine Applikation. Aber wie funktioniert das?</p>
<p>Jede Datei, welche unter <code>/app/assets/javascripts</code> abgelegt wird, ist über<code> /assets/*</code> aufrufbar. Wenn wir  in dem Ordner z.B. die Datei <code>greetings.txt</code> erstellen, ist diese unter <code>http://localhost:3000/assets/greetings.txt</code> erreichbar. Auch wenn diese Datei im Unterordner <code>javascripts</code> liegt, ist sie über die selbige URL erreichbar. Es spielt also keine Rolle, in welchem Unterverzeichnis die Datei gelegt wird, diese wird immer unter <code>/assets/greetings.txt</code> erreichbar sein. Das einzige was zu beachten ist, dass nach einem Verschieben der Datei ein Serverneustart erforderlich ist, um auf die Datei zuzugreifen.</p>
<p>Das Verzeichnis <code>/app/assets</code> ist nicht der einzige Ort, wo Assets abgelegt werden können. Wenn wir unter <code>/lib</code> einen asset Ordner erstellen, werden diese Files so behandelt, als wären sie im Haupt-Asset-Ordner. Das selbe passiert mit Dateien unter <code>/vendor/assets</code>.</p>
<p>Wenn du Assets hast, welche nicht spezifisch für die aktuelle Applikation sind, ist es besser, diese unter <code>/lib</code> oder <code>/vendor</code> zu plazieren. Wenn deine App z.B. jQuery plugin verwendet, welches von dir selbst nicht verwaltet oder entwickelt wurde, wäre es sinnvoll, diese unter <code>/vendor/assets</code> abzulegen. Von uns selbst verwaltete Assets, welche nicht Applikationspezifisch sind, wären unter <code>/lib</code> richtig aufgehoben.</p>
<p>Im Grunde genommen ist die Asset Pipeline eine Liste aus Loadpaths. Diese können mit dem Befehl <code>Rails.application.config.assets.paths</code> in der Console angezeigt werden.<br />
Die Ausgabe zeigt jedes Verzeichnis unter <code>app/assets</code>, <code>/lib/assets</code> und <code>/vendor/assets</code>. Auffallend ist das Verzeichnis am Ende der Liste, welches vom <code>jquery-rails</code> gem kommt, welches wir in unserer Applikation includiert haben. Mit <code>bundle open</code> können wir nun das gem direkt im Editor öffnen.</p>
<p>Hierfür muss dein Pfad zum Texteditor mit der Umgebungsvariable <code>BUNDLE_EDITOR</code> oder <code>EDITOR</code> gesetzt sein. In der Verzeichnisstruktur des gem&#8217;s befindet sich der Ordner <code>vendor/asset/javascripts</code>. Dieser beinhaltet einige jQuery Dateien, welche ebenfalls durch die Asset Pipeline geladen werden.</p>
<p>So jetzt zurück zur <code>application.js</code>.</p>
<pre>// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
//= require jquery
//= require jquery_ujs
//= require_tree .</pre>
<p>Diese JavaScript Datei beinhaltet eigentlich nur Kommentare, welche aber wichtig für die Asset Pipeline sind. Diese Syntax definiert das Manifest und wird intern von <a href="http://getsprockets.org/" target="_blank">Sprockets</a> verwaltet. Wird diese Datei nun angefragt, wird von Sprockets das Manifest ausgelesen. Anschließend werden alle angegebenen JavaScript Files zusammengesucht und in die <code>application.js</code> vor dem eigentlichen Code eingefügt. Bei <code>require jquery</code> (die Endung .js ist hier optional) wird nun in den Loadpaths die <code>jquery.js</code> gesucht. In unserem Fall liegt diese unter <code>vendor/asset/javascripts</code> des jquery-rails gem&#8217;s. Dies funktioniert auch mit CoffeeScript Dateien.</p>
<p>Mit <code>require_tree .</code> wird jede JavaScript oder CoffeeScript Datei in dem Home-Verzeichniss und den Unterverzeichnissen in die <code>application.js</code> eingefügt. Es kann ja auch sein, dass ihr einige Dateien garnicht in der <code>application.js</code> dabei haben wollt. Hierfür gibt es einige Wege um dies zu vermeiden. Einerseits könnte man mit <code>require_directory</code> nur die Dateien des Asset-Verzeichnisses laden. Nicht aber die Unterverzeichnisse. Andererseits können wir alle Dateien einzeln mit require inkludieren.</p>
<p>Auch Preprocessing funktioniert mit der Asset Pipeline. Hierfür erstellen wir die Datei <code>greetings.txt.erb</code>. Die Endung txt weist auf eine statische Datei hin. Mit der weiteren Endung .erb wird die Datei vorher vom erb-processor behandelt. So können wir also ERB Code in die Datei schreiben, welcher dann prozessiert wird.</p>
<pre>hello world &lt;%= 1 + 1 %&gt;</pre>
<p>Beim Ausführen im Browser mit <code>/assets/greetings.txt</code> bekommen wir die Ausgabe: <code>hello world 2</code>. Die Endung erb ist hierbei nicht notwendig. Dies funktioniert mit den SASS und CoffeeScript Dateien gleich. Wir können auch das Preprocessing verketten. Bei der Dateiendung .scss.erb wird die Datei zuerst vom Erb-Processor behandelt und anschließend vom Scss-Processor.</p>
<p>So das war mal ein kleiner Überblick über Features der Asset Pipeline. Es gibt noch einige Unterschiede über das Verhalten der Pipeline im Production-Mode. Hierfür starten wir den Server im Production-Mode:</p>
<pre>rails s -e production</pre>
<p>Wenn wir jetzt einen Blick in den Seitenquelltext unserer Applikation werfen, bekommen wir bei den Assets eine Ausgabe wie:</p>
<pre>&lt;link href="/assets/application-412fe22651f4486c51e54176003a9f57.css" media="screen" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="/assets/application-3e3a5167191afa70c7b72440eee7dd40.js" type="text/javascript"&gt;&lt;/script&gt;</pre>
<p>Die Dateinamen der Assets beinhalten nun noch einen Hash, welcher für das Caching wichtig ist. Diese Methode eignet sich für das Caching besser, als der in Rails 3.0 noch verwendete Timestamp. Bei einem Blick in die <code>application.js</code> sehen wir nun, dass diese minimiert und komprimiert ist. Dies spart Ladezeiten ein.</p>
<p>Die Assets können auch mit folgendem Befehl vorkompiliert werden:</p>
<pre>rake assets:precompile</pre>
<p>Hierbei werden die Assets kompiliert und diese in den Ordner <code>/public</code> kopiert.</p>
<p>Ich hoffe, euch ist die Asset Pipeline nun etwas klarer. Für mehr Infos dazu besucht bitte den <a href="http://guides.rubyonrails.org/asset_pipeline.html" target="_blank">RailsGuide zur Asset Pipeline</a>. Besonderen Dank geht an Ryan Bates und seiner <a href="http://railscasts.com/episodes/279-understanding-the-asset-pipeline" target="_blank">Railscasts-Folge zur Asset Pipeline</a>, die mir als Vorlage für den Post diente.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/rails-asset-pipeline/" data-text="Rails Asset Pipeline" data-via="mindbreak" data-counturl="http://www.wrel.de/rails-asset-pipeline/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/rails-asset-pipeline/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Frails-asset-pipeline%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/rails-asset-pipeline/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>bundler 1.1 &#8211; was ist neu?</title>
		<link>http://www.wrel.de/bundler-1-1-was-ist-neu/</link>
		<comments>http://www.wrel.de/bundler-1-1-was-ist-neu/#comments</comments>
		<pubDate>Tue, 20 Mar 2012 18:03:57 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Allgemein]]></category>
		<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=108</guid>
		<description><![CDATA[Mit dem Bundler-Gem ist es seit Rails 3 einfach, seine Gems und deren Abhängigkeiten besser zu verwalten. Seit Januar 2011 wurde an der Version 1.1 gearbeitet, welche seit einigen Wochen nun als 1.1.0 stable Version verfügbar ist. Was ist neu? &#8230; <a href="http://www.wrel.de/bundler-1-1-was-ist-neu/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>Mit dem <a href="https://github.com/carlhuda/bundler" target="_blank">Bundler-Gem</a> ist es seit Rails 3 einfach, seine Gems und deren Abhängigkeiten besser zu verwalten. Seit Januar 2011 wurde an der Version 1.1 gearbeitet, welche seit einigen Wochen nun als 1.1.0 stable Version verfügbar ist. Was ist neu? Was hat sich geändert?</p>
<p><img class="aligncenter size-full wp-image-124" title="bundler" src="http://www.wrel.de/wp-content/uploads/2012/03/bundler.png" alt="" width="490" height="169" /></p>
<p><span id="more-108"></span></p>
<p>Das wichtigste Feature ist <code>bundle outdated</code>. Wie der Name schon sagt, werden mit diesem Befehl alle Gems aufgelistet, bei denen eine neuere Version verfügbar ist. Mit dem oben genannten Befehl wird lediglich der Gem-Name, die aktuell installierte und die aktuell verfügbare Version angezeigt:</p>
<pre>Outdated gems included in the bundle:
* sprockets (2.3.1 &gt; 2.1.2)</pre>
<p>Mit <code>bundle outdated --pre</code> wird auch noch geprüft, ob Pre-Releases von den installierten Gems vorhanden sind.</p>
<p>Das nächste Feature ist der Befehl <code>bundle clean</code>. Hierbei werden ungenutzte Gems im <code>--path</code> Verzeichnis deinstalliert. Beim Ausführen kommt von Bundler folgende Warnung:</p>
<pre>Can only use bundle clean when --path is set or --force is set</pre>
<p>Diese Abfrage soll verhindern, dass alle deine Gems versehentlich deinstalliert werden.</p>
<p>Zu guter Letzt <code>bundle install --standalone</code>. Erzeugt ein bundle, welches ohne Bundler oder Ruby Gems während der Laufzeit arbeitet. Hierfür wird ein Ordner bundle erstellt, wo das Bundle selbst zu finden ist. Zudem wird in <code>bundle/bundler/setup.rb</code> das Bundler Setup ersetzt.</p>
<p>Das war jetzt mal das Wichtigste. Alle anderen Änderungen findet ihr <a href="https://github.com/carlhuda/bundler/blob/master/CHANGELOG.md" target="_blank">hier</a>. Zu den neuen Befehlen wurde auch die Geschwindigkeit des Bundlers verbessert. Der Grund dafür ist, dass Bundler bei der HTTP Anfrage an rubygems.org eine kurze Liste mit Gems und dessen Abhängigkeiten, anstatt die kompletten Informationen über jedes einzelne Gem zurückbekommt (<a href="http://patshaughnessy.net/2011/10/14/why-bundler-1-1-will-be-much-faster">via</a>).</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/bundler-1-1-was-ist-neu/" data-text="bundler 1.1 &#8211; was ist neu?" data-via="mindbreak" data-counturl="http://www.wrel.de/bundler-1-1-was-ist-neu/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/bundler-1-1-was-ist-neu/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Fbundler-1-1-was-ist-neu%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/bundler-1-1-was-ist-neu/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>.gitignore &#8211; und was kommt rein?</title>
		<link>http://www.wrel.de/gitignore-und-was-kommt-rein/</link>
		<comments>http://www.wrel.de/gitignore-und-was-kommt-rein/#comments</comments>
		<pubDate>Sat, 17 Mar 2012 19:40:48 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Allgemein]]></category>
		<category><![CDATA[Ruby on Rails]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=81</guid>
		<description><![CDATA[Ein neues Rails Projekt wurde angelegt und auch gleichzeitig dazu ein GIT-Repository initialisiert. Bevor es jetzt losgehen kann, noch schnell die .gitignore einstellen. Nur was kommt jetzt alles in die Datei rein? Das schöne an Rails 3 ist, dass mit &#8230; <a href="http://www.wrel.de/gitignore-und-was-kommt-rein/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>Ein neues Rails Projekt wurde angelegt und auch gleichzeitig dazu ein GIT-Repository initialisiert. Bevor es jetzt losgehen kann, noch schnell die <code>.gitignore</code> einstellen. Nur was kommt jetzt alles in die Datei rein?<img class="aligncenter size-full wp-image-99" title="git-ignore" src="http://www.wrel.de/wp-content/uploads/2012/03/git-ignore.png" alt="" width="353" height="193" /></p>
<p><span id="more-81"></span></p>
<p>Das schöne an Rails 3 ist, dass mit rails new neben der leeren Rails-App auch noch ein Git-Reposity angelegt wird. Doch nicht alle Dateien, welche im Projektordner liegen, wollt ihr auch später in eurem Repository haben. Hierfür kommt die <code>.gitignore</code> Datei ins Spiel. Alle Dateien und Ordner die hier eingetragen werden, kommen nicht in euer Repository. Beim Ausführen von <code>git status</code> werden diese nicht unter den &#8220;untracked files&#8221; aufgelistet und auch bei <code>git add .</code> nicht eurem commit hinzugefügt.</p>
<p>So nachdem wir mit rails new ein neues Projekt angelegt haben öffnen wir die .gitignore File. Diese findet ihr in eurem Stammverzeichnis eurer Rails App:</p>
<pre>.bundle
db/*.sqlite3
log/*.log
tmp/</pre>
<p>Hier wurden schon einige Pfade und Files eingetragen, welche später nicht im Repository landen sollen. Die Dateien und Ordner werden hier relativ vom Rails-Root angegeben. Ihr könnt hier jetzt einzelne Dateien <code>(.bundle, .rspec)</code>, Verzeichnisse (<code>tmp/</code>) oder spezielle Dateitypen (<code>log/*.log</code>) eingeben.</p>
<p>Was kommt jetzt aber noch alles in die Git-Ignore, damit später keiner im Team sagt &#8220;Warum hast du das eingecheckt? Das kommt nicht ins Repository!&#8221;. Dazu muss ich sagen, dass es keine allgemeine .gitignore-Datei gibt. Es gibt zwar ein paar Standardeinträge, welche von Rails in die Datei eingetragen werden, aber was im speziellen nicht ins Repository kommt, hängt von folgenden Faktoren ab:</p>
<ul>
<li>Verwendete GEM&#8217;s wie z.B. rspec, rcov,..</li>
<li>Welche IDE verwendet wird. So muss bei Netbeans z.B. noch nbproject der .gitignore hinzugefügt werden.</li>
<li>Welches Betriebsystem verwenden die Entwickler? Hierbei (.DS_Store bei Mac oder Thumbs.db bei Windows)</li>
<li>Welche Dateiein enthalten sensible Daten wie Login-Daten. (z.B. database.yml)</li>
</ul>
<pre>.bundle
db/*.sqlite3
log/*.log
tmp/
.rspec
/spec/tmp/*</pre>
<p>Eine Vorlage für eine .gitignore-Datei speziell für Rails, findet ihr <a href="https://github.com/github/gitignore/blob/master/Rails.gitignore" target="_blank">hier</a>. Dort könnt findet ihr auch noch für andere Sprachen die Vorlagen (<a href="https://github.com/github/gitignore" target="_blank">link</a>).</p>
<p>Zwei Dinge wären da noch zu erwähnen. Git selbst ignoriert keine Dateien, welche bereits dem Repository hinzugefügt wurden. Um Dateien im nachhinein zu ignorieren muss <code>git rm --cached filename</code> ausgeführt werden. Die Datei bleibt weiterhin im lokalen Verzeichnis, wird aber von GIT nicht mehr getracked.</p>
<p>Wenn ihr nicht bei jedem neuen Projekt eine neue .gitignore Datei anlegen wollt, habt ihr auch die Möglichkeit, eine globale .gitignore anzulegen. Hierfür einfach <code>git config --global core.excludesfile ~PFAD_ZUR_GITIGNORE/.gitignore_global</code> eingeben, und die globale Gitignore ist gesetzt.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/gitignore-und-was-kommt-rein/" data-text=".gitignore &#8211; und was kommt rein?" data-via="mindbreak" data-counturl="http://www.wrel.de/gitignore-und-was-kommt-rein/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/gitignore-und-was-kommt-rein/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Fgitignore-und-was-kommt-rein%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/gitignore-und-was-kommt-rein/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
<enclosure url="http://wrel.podspot.de/files/gitignore.m4a" length="2959982" type="audio/x-m4a" />
		<itunes:subtitle>Ein neues Rails Projekt wurde angelegt und auch gleichzeitig dazu ein GIT-Repository initialisiert. Bevor es jetzt losgehen kann, noch schnell die .gitignore einstellen. Nur was kommt jetzt alles in die Datei rein? - Das schöne an Rails 3 ist,</itunes:subtitle>
		<itunes:summary>Ein neues Rails Projekt wurde angelegt und auch gleichzeitig dazu ein GIT-Repository initialisiert. Bevor es jetzt losgehen kann, noch schnell die .gitignore einstellen. Nur was kommt jetzt alles in die Datei rein?



Das schöne an Rails 3 ist, dass mit rails new neben der leeren Rails-App auch noch ein Git-Reposity angelegt wird. Doch nicht alle Dateien, welche im Projektordner liegen, wollt ihr auch später in eurem Repository haben. Hierfür kommt die .gitignore Datei ins Spiel. Alle Dateien und Ordner die hier eingetragen werden, kommen nicht in euer Repository. Beim Ausführen von git status werden diese nicht unter den &quot;untracked files&quot; aufgelistet und auch bei git add . nicht eurem commit hinzugefügt.

So nachdem wir mit rails new ein neues Projekt angelegt haben öffnen wir die .gitignore File. Diese findet ihr in eurem Stammverzeichnis eurer Rails App:
.bundle
db/*.sqlite3
log/*.log
tmp/
Hier wurden schon einige Pfade und Files eingetragen, welche später nicht im Repository landen sollen. Die Dateien und Ordner werden hier relativ vom Rails-Root angegeben. Ihr könnt hier jetzt einzelne Dateien (.bundle, .rspec), Verzeichnisse (tmp/) oder spezielle Dateitypen (log/*.log) eingeben.

Was kommt jetzt aber noch alles in die Git-Ignore, damit später keiner im Team sagt &quot;Warum hast du das eingecheckt? Das kommt nicht ins Repository!&quot;. Dazu muss ich sagen, dass es keine allgemeine .gitignore-Datei gibt. Es gibt zwar ein paar Standardeinträge, welche von Rails in die Datei eingetragen werden, aber was im speziellen nicht ins Repository kommt, hängt von folgenden Faktoren ab:

	Verwendete GEM&#039;s wie z.B. rspec, rcov,..
	Welche IDE verwendet wird. So muss bei Netbeans z.B. noch nbproject der .gitignore hinzugefügt werden.
	Welches Betriebsystem verwenden die Entwickler? Hierbei (.DS_Store bei Mac oder Thumbs.db bei Windows)
	Welche Dateiein enthalten sensible Daten wie Login-Daten. (z.B. database.yml)

.bundle
db/*.sqlite3
log/*.log
tmp/
.rspec
/spec/tmp/*
Eine Vorlage für eine .gitignore-Datei speziell für Rails, findet ihr hier. Dort könnt findet ihr auch noch für andere Sprachen die Vorlagen (link).

Zwei Dinge wären da noch zu erwähnen. Git selbst ignoriert keine Dateien, welche bereits dem Repository hinzugefügt wurden. Um Dateien im nachhinein zu ignorieren muss git rm --cached filename ausgeführt werden. Die Datei bleibt weiterhin im lokalen Verzeichnis, wird aber von GIT nicht mehr getracked.

Wenn ihr nicht bei jedem neuen Projekt eine neue .gitignore Datei anlegen wollt, habt ihr auch die Möglichkeit, eine globale .gitignore anzulegen. Hierfür einfach git config --global core.excludesfile ~PFAD_ZUR_GITIGNORE/.gitignore_global eingeben, und die globale Gitignore ist gesetzt.</itunes:summary>
		<itunes:author>wrel.de</itunes:author>
		<itunes:explicit>no</itunes:explicit>
	</item>
		<item>
		<title>Rails 3 Setup unter Windows</title>
		<link>http://www.wrel.de/rails-3-setup-unter-windows/</link>
		<comments>http://www.wrel.de/rails-3-setup-unter-windows/#comments</comments>
		<pubDate>Sun, 11 Mar 2012 17:26:18 +0000</pubDate>
		<dc:creator>tom</dc:creator>
				<category><![CDATA[Ruby on Rails]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[windows]]></category>

		<guid isPermaLink="false">http://www.wrel.de/?p=58</guid>
		<description><![CDATA[So heute will ich euch mal zeigen, wie ihr Ruby on Rails 3.2 auf eurem Windows Rechner installieren könnt. Vor einiger Zeit war es noch etwas kompliziert, ein Rails System auf einem Windows PC einzurichten, aber mittlerweile gibt es einige &#8230; <a href="http://www.wrel.de/rails-3-setup-unter-windows/">Weiterlesen <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p style="text-align: left;">So heute will ich euch mal zeigen, wie ihr Ruby on Rails 3.2 auf eurem Windows Rechner installieren könnt. Vor einiger Zeit war es noch etwas kompliziert, ein Rails System auf einem Windows PC einzurichten, aber mittlerweile gibt es einige Tools und Wege, welche den Installationsprozess erleichtern. Also dann mal los&#8230;<img class="aligncenter size-full wp-image-70" title="rails-windows" src="http://www.wrel.de/wp-content/uploads/2012/03/rails-windows.png" alt="" width="493" height="268" /><br />
<span id="more-58"></span></p>
<p>Zuerst ladet ihr euch den <a href="http://railsinstaller.org/" target="_blank">RailsInstaller</a> runter. Einfach auf &#8220;Download the Kit&#8221; und dann die exe ausführen. Der RailsInstaller liefert dir alles mit, was du für deine Rails-Anwendung benötigst. Aktuell befinden sich in der RailsInstaller Version 2.1.0 folgende Pakete:</p>
<ul>
<li><strong><a href="http://ruby-lang.org/" target="_blank">Ruby</a></strong> 1.9.3-p125</li>
<li><strong><a href="http://rubyonrails.org/" target="_blank">Rails</a></strong> 3.2</li>
<li><strong><a href="http://gembundler.com/" target="_blank">Bundler</a></strong> 1.0.18</li>
<li><strong><a href="http://git-scm.com/" target="_blank">Git</a></strong> 1.7.6</li>
<li><strong><a href="http://sqlite.org/">Sqlite</a></strong> 3.7.3</li>
<li><strong><a href="https://github.com/rails-sqlserver/tiny_tds">TinyTDS</a></strong> 0.4.5</li>
<li><strong><a href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter">SQL Server support</a></strong> 3.3.3</li>
<li><strong><a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">DevKit</a></strong></li>
</ul>
<ol>
<li>Die heruntergeladene &#8220;railsinstaller-2.1.0.exe&#8221; Datei ausführen.</li>
<li>Nachdem ihr ein paar Standard Installationsscreens weiter seit, werdet ihr nach dem Installationspfad gefragt. Hier einfach den Pfad deiner Wahl setzen. Wichtig ist die Checkbox &#8220;Add executeables for Ruby, Git and DevKit to the Path&#8221;. Hier wird der Pfad zu Ruby der Windows Umgebungsvariable PATH hinzugefügt. So kann Ruby später auch in der Konsole ausführen werden.<a href="http://www.wrel.de/wp-content/uploads/2012/03/railsinstaller.png"><img class="aligncenter size-full wp-image-69" title="railsinstaller" src="http://www.wrel.de/wp-content/uploads/2012/03/railsinstaller.png" alt="" width="512" height="400" /></a></li>
<li>Nach Abschluss der Installation geht ihr in die Windows Konsole und gebt folgendes ein:
<pre>ruby -v</pre>
<p>dies sollte nun die aktuell installierte Ruby Version zurückgeben:</p>
<pre>ruby 1.9.3-p125 ...</pre>
<p>Sollte hier jetzt statt der Version der Befehl nicht gefunden werden, gebt <em>PATH</em> in die Console ein. Hier sollte ein Pfad zu <em>Ruby&#8230;\bin</em> vorhanden sein. Wenn nicht bitte nochmal Schritt 2 ausführen.</li>
<li>Wir überprüfen jetzt noch schnell, ob RubyGems (Paketmanager von Ruby) ordnungsgemäß installiert wurde:
<pre>gem -v</pre>
<p>Auch hier sollte eine Version zurückkommen. Ansonsten einfach nochmal Schritt 2 ausführen.</li>
<li>Jetzt mal prüfen, ob Rails selbst installiert ist:
<pre>rails -v</pre>
<p>sollte dann</p>
<pre>rails 3.2.0</pre>
<p>zurückliefern. Wenn nicht einfach</p>
<pre>gem install rails</pre>
<p>eingeben und über RubyGems wird die aktuelle Rails Version installiert. Diese kann auch höher sein als 3.2. Welche Version gerade aktuell ist, findest du unter <a href="http://rubygems.org/gems/rails" target="_blank">Rubygems</a></li>
</ol>
<p>Und nun hätten wir eine lauffähige Ruby on Rails Installation mit allen Abhängigkeiten wie SQLite, Ruby, Bundler und auch das Versionskontrollsystem GIT auf unserem Windows-System. War also halb so schlimm und hat nichtmal viel Zeit gekostet.</p>
<p>Eine Installation von Ruby on Rails geht dank dem RailsInstaller schnell und ohne großen Aufwand. Im Vergleich zur Installation unter Linux oder Mac OS X reicht hier der Installer aus. Leider läuft Ruby on Rails unter Windows langsamer als unter Unix basierten Systemen. Aber es ist trotzdem möglich unter Windows, Rails Anwendungen zu entwickeln.</p>
<div id="social-essentials" class="se_left"><div class="se_button se_button_small" style="width:85px;margin:0px 0px 0px 0px"><a href="https://twitter.com/share" class="twitter-share-button" data-url="http://www.wrel.de/rails-3-setup-unter-windows/" data-text="Rails 3 Setup unter Windows" data-via="mindbreak" data-counturl="http://www.wrel.de/rails-3-setup-unter-windows/" data-count="horizontal" data-lang="en">Tweet</a></div><div class="se_button se_button_small" style="width:60px;margin:0px 0px 0px 0px"><g:plusone size="medium" href="http://www.wrel.de/rails-3-setup-unter-windows/" count="true"></g:plusone></div><div class="se_button se_button_small" style="width:65px;margin:0px 0px 0px 0px"><a href="http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.wrel.de%2Frails-3-setup-unter-windows%2F&media=&description=" class="se-pin-it-button" always-show-count="true" count-layout="horizontal"><img border="0" src="//assets.pinterest.com/images/PinExt.png" title="Pin It" /></a></div></div><div class="clear"></div><style type="text/css">#call_to_action h4{padding:0px 5px;}</style>]]></content:encoded>
			<wfw:commentRss>http://www.wrel.de/rails-3-setup-unter-windows/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
	</channel>
</rss>
